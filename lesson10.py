# Разбор домашки:
# Пользователь вводит название страны на английском, программа возвращает перевод на русском.
country_translations = {
    'United States': 'Соединенные Штаты',
    'Germany': 'Германия',
    'France': 'Франция',
    'Spain': 'Испания',
    'Italy': 'Италия',
    'Japan': 'Япония',
    'Russia': 'Россия',
    'China': 'Китай',
}

# 1 вариант решения
vvod = input('Введите страну: ')
print(country_translations[vvod])


# 2 вариант решения с помощью метода get()
print(country_translations.get(vvod, 'Такой страны нет'))
# этот метод выводит значение по ключу
# а если такого ключа нет, то выводит'Такой страны нет'


# домашка №2
# Из этих двух списков получите третий, где будут продукты, которые есть в обоих списках
# то есть вот такой: ['хлеб', 'лук','сыр']
lst1 = ['молоко', 'хлеб', 'картошка', 'лук', 'масло', 'сыр']
lst2 = ['сыр', 'хлеб', 'шпроты', 'лук', 'варенье']

# 1 вариант решения
for p in lst1:
    if p in lst2:
        print(p)

# 2 вариант решения
l = [p for p in lst1 if p in lst2]
print(l) # ['хлеб', 'лук', 'сыр']


# познакомимся с ФУНККЦИЯМИ
# до сегодняшнего дня мы пользовались встроенными функциями, такими как print(), input(), len(), sum()
# сегодня мы научимся писать свои функции
# например, давайте напишем функцию, которая будет вычислять площадь круга
# формула вычисления площади круга S = π * radius ** 2
# то есть нам для вычисления площади нужно знать только радиус
# значит у нашей функции будет только 1 параметр - радиус. Давайте так его и назовём
def ploshad_kruga(radius):
    print(3.14 * radius ** 2)

# Функцию написали. Давайте его теперь вызовем:
ploshad_kruga(8) # узнаем какая площадь у круга с радиусом 8 сантиметров
# в консоли увидим 200.96
# и как вы видите, мы вызвали функцию не применяя print(). Мы можем это делать так как у нас внутри функции уже есть print


# задание на уроке: напишите функцию, которая вычисляет площадь прямоугольника
# напоминаю формулу вычисления площади прямоугольника: S = a * b
def ploshad_pryamougolnika(dlina, shirina):
    result = dlina * shirina
    print(result)


# давайте вызовем эту функцию и с её помощью узнаем площадь нашего кабинета
ploshad_pryamougolnika(6.5, 4.5)
# 29.25

# а что если мы хотим узнать какая из двух комнат больше:
# первая комната: длина 5.6, ширина 2.3
# вторая комната: длина 4.7, ширина 3.9
room1 = ploshad_pryamougolnika(5.6, 2.3)
room2 = ploshad_pryamougolnika(4.7, 3.9)
print(room1 > room2)
# у нас не сработает print() из-за того, что функция ploshad_pryamougolnika() не возвращает число, а принтует что-то
# давайте переделаем её и вместо принта будем использовать return
def ploshad_pryamougolnika(dlina, shirina):
    result = dlina * shirina
    return result

room1 = ploshad_pryamougolnika(5.6, 2.3)
room2 = ploshad_pryamougolnika(4.7, 3.9)
print(room1 > room2) # False
# теперь код работает, так как функция ploshad_pryamougolnika() возвращает нам числа, и мы эти числа сравниваем между собой


# задание, которое делали на уроке:
# напишите функцию, которая принимает имя человека сумму в сомах
# и принтует "Уважаемый(ая), _____ , пожалуйста, верните долг в размере ____ сом."

def kollektor(name, summa):
    print(f'Уважаемый,', name, 'верните долг в размере', summa, 'сом.')

# вызовем эту функцию:
kollektor('Maria', 10000)
# Уважаемый(ая), Maria, верните долг в размере 10000 сом.

# код рабочий, но можно запутаться в этой куче кавычек и запятых
# давайте применим очень удобное ФОРМАТИРОВАНИЕ СТРОК:
def kollektor(name, summa):
    print(f'Уважаемый, {name}, верните долг в размере {summa} сом.')

# вызовем функцию:
kollektor('Maria', 10000) # Уважаемый(ая), Maria , пожалуйста, верните долг в размере 10000 сом.
# как видите результат не изменился, но с помощью форматирования наммного легче вставлять переменные в строку


# вспомним словари
# давайте представим, что у нас есть такой словарь, который содержит информацию о должниках
karyz_depter = {
    'Sabina': 1000,
    'Marat': 120,
    'Uluk': 600,
    'Farida': 2300
}

# помните методы, с помощью  которых мы могли вывести только ключи
print(karyz_depter.keys()) # ['Sabina', 'Marat', 'Uluk', 'Farida']

# с помощью цикла for мы можем пройтись по ключам словаря:
for k in karyz_depter.keys():
    print(k)



# и метод, с помощью которого мы могли вывести только значения
print(karyz_depter.values()) # [1000, 120, 600, 2300]

# с помощью цикла for мы можем пройтись по значениям словаря
for v in karyz_depter.values():
    print(v)


# а ещё у словарей есть такой метод items() который позволяет выводить пары ключ-значение
print(karyz_depter.items()) # [('Sabina', 1000), ('Marat', 120), ('Uluk', 600), ('Farida', 2300)]

# и пройтись циклом for одновременно по ключам и значениям:
for k, v in karyz_depter.items():
    print(k, v)


# с помощью цикла мы можем написать сообщение каждому должнику вот таким образом:
for k, v in karyz_depter.items():
    print('Уважаемый(ая),', k, 'верните долг в размере', v, 'сом.')

# но зачем нам это писать, если у нас уже есть функция kollektor
# давайте воспользуемся ею
for k, v in karyz_depter.items():
    kollektor(k, v)

# и вот что мы получим:
# Уважаемый, Sabina, верните долг в размере 1000 сом.
# Уважаемый, Marat, верните долг в размере 120 сом.
# Уважаемый, Uluk, верните долг в размере 600 сом.
# Уважаемый, Farida, верните долг в размере 2300 сом.