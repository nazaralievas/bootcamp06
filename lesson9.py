# разберём задание, которое вызвало трудности на прошлом уроке:
# пользователь вводит число, а программа возвращает таблицу умножения этого числа
# первый способ:
num = int(input('Введите число: '))
for i in range(1, 11):
    print(num * i)

# второй способ с использованием list comprehension
num = int(input('Введите число: '))
lst = [i * num for i in  range(1, 11)]
print(lst)


# познакомимся с новым типом данных - кортеж (на англ. tuple)
tup = (2, 4, 6, 8, 10, 12, 14, 16, 18, 20)
# создается с помощью круглых скобок

# особенностями кортежей является то, что они неизменяемы, ничего нельзя добавить, ни удалить
# так же как в списках можно обращаться по индексу и выводить определённый элемент:
tup = (2, 4, 6, 8, 10, 12, 14, 16, 18, 20)
print(tup[-1]) # 20

# можно выводить слайсы, то есть отрезок, указывая начало и конец
# например, есди мы хотим взять кусок из tup с начала до числа 12, то указываем отрезок от 0 до 6 индекса
print(tup[0:6]) # [2, 4, 6, 8, 10, 12]
# можно написать и вот так:
print(tup[:6])

# чтобы взять отрезок от 14 до конца:
print(tup[6:])

# чтобы взять отрезок [10, 12, 14, 16, 18], указываем индексы начала и конца:
print(tup[4:9])

# если мы не укажем ни начало, ни конец, то выведется просто копия кортежа (или списка)
print(tup[:]) # (2, 4, 6, 8, 10, 12, 14, 16, 18, 20)

# у кортежей есть два метода:
# метод count() считает сколько раз определённый элемент встречается в кортеже
tup = (2, 4, 6, 8, 10, 12, 14, 16, 18, 20)
print(tup.count(18)) # 1, то есть в кортеже tup 1 раз встречается число 18

# метож index() возвращает индекс искомого элемента
print(tup.index(16)) # 7, это индекс числа 16


# известные функции применимы к кортежам
tup = (2, 4, 6, 8, 10, 12, 14, 16, 18, 20)
print(sum(tup)) 
print(len(tup))
print(max(tup))
print(min(tup))
print(sorted(tup))

# кортежи неизменимы, однако если в кортеже есть список, то его можно менять
t = (1, 2, 3, [9, 0])
t[3].append('hello')
print(t) # 1, 2, 3, [9, 0, 'hello']


# следующий тип данных который мы рассмотрим - это множества (англ. set)
# особенностями множеств является то, что в них нельзя хранить дубликаты
s = {1, 2, 3, 4, 1, 1, 1, 1, 1, 1, 2, 2, 2}
print(s) # {1, 2, 3, 4}
# несмотря на то, что мы создали множество с несколькими числами 1 и 2, когда мы принтуем его,
# мы видим, что дубликаты удалились и остались только уникальные значения

# а так же в множествах нет индексации. Элементы хранятся не в определённом порядке, а просто в хаотичной куче

# в множество можно добавлять элементы:
s.add(8)
print(s) # {1, 2, 3, 4, 8}

# и удалять элементы:
s.remove(1)
print(s) # {2, 3, 4, 8}


# функцией set можно удалять дубликаты из списков:
lst = ['saadat', 'aman', 'nina', 'saadat']
print(s) # {'saadat', 'aman', 'nina'}


# задача, которую делали на уроке:
# Группа из 15 человек голосовали кого выбрать президентом:
results = ['Trump', 'Biden', 'Bush', 'Trump', 'Bush', 'Biden', 'Biden', 'Biden', 'Trump', 'Biden', 'Bush', 'Trump', 'Bush', 'Biden', 'Biden']
# сколько всего кандидатов?
# кто быиграл выборы?
# сначала с помощью фунции set() удалим дубликаты и узнаем сколько всего кандидатов:
s = set(results)
print(s) # {'Trump', 'Biden', 'Bush'}

# а теперь посчитаем сколько голосов собрал каждый кандиадт с помошью метода count()
print(results.count('Trump')) # 4
print(results.count('Biden')) # 7
print(results.count('Bush')) # 4


# теперь познакомимся со словарями (англ. dictionary)
# каждый элемент словаря состоит из ключа и значения
# благодаря этому можно удобно хранить информацию, например оценки за предметы
ocenki = {'bio': 4, 'geo': 5, 'literatura': 2, 'risovanie': 3}
# в этом словаре 4 элемента, то есть 4 пары ключ-значение
# мы можем это подтвердить с помощью функции len()
print(len(ocenki)) # 4

# чтобы вывести оценку за определённую оценку, нужно обратиться по ключу
# давайте узнаем оценку за геометрию:
print(ocenki['geo']) # 5

# чтобы поменять значение определённого ключа (например если хотим исправить оценку по литературе с двойки на тройку):
ocenki['literatura'] = 3

# рассмотрим методы 
print(ocenki.keys()) # dict_keys(['bio', 'geo', 'litra', 'izo'])
print(ocenki.values()) # dict_values([4, 5, 3, 5])

print(sum(ocenki.values()) / len(ocenki.values())) # 4.25
print(sum([4, 5, 3, 5]) / len([4, 5, 3, 5])) # 4.25


ocenki['fizra'] = 5
ocenki['adabiyat'] = 5
del ocenki['fizra']

print(ocenki) #{'bio': 4, 'geo': 5, 'litra': 3, 'izo': 5, 'adabiyat': 5}

# Рахат сдала еще 200 сом
# узнайте сколько денег уже собралось
sbor = {
    'Marat': 1200,
    'Bakai': 1200,
    'Timur': 1200,
    'Ayana': 1200,
    'Rahat': 1000
}

# значением в словарях могут быть и списки:
student = {
    'name': 'Amanbol',
    'courses': ['JS', 'Graphic Design', 'HTML/CSS', 'Python'],
    'age': 13
}

print(student['courses'][3]) # выводим из списка элемент под индексом 3
student['courses'][0] = 'Java Script' # меняем JS на Java Script
student['courses'].append('Java') # добавляем к списку 'courses' ещё один эле
print(student)
# и вот что мы получили:
# {'name': 'Amanbol', 'courses': ['Java Script', 'Graphic Design', 'HTML/CSS', 'Python', 'Java'], 'age': 13}